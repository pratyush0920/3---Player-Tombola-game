package moderator;

import java.util.ArrayList;

import link.Link;
// I use Singleton Design pattern.
public class Moderator implements Runnable{
	
	public ArrayList<Integer> numbr = new ArrayList<Integer>( );// This stores the number taken as input from user.
	private  Link link; // To provide synchronization between player and moderator.
	private int numberAnnounced; // To store the number passed to link, so player uses it.
	
	 private static Moderator mod = new Moderator(); // object creation for Moderator, as per Sigle design pattern.
	 
	 private Moderator() {
		 
	 }
	 
	 public static synchronized Moderator getInstance() {   //To get the object.
		 return mod;
	 }
	 
	 public void setLink(Link link) {
		 this.link = link;
	 }

	@Override
	public void run() {
		
		try {
				//display other no. by 1200 milli-seconds delay
				Thread.sleep(1200);
			}
		catch(Exception e) {}
			
			
		
		synchronized(link.obj) {			
					
					int z = 0;
					
					// Runs till any one player wins the game, terminates the numbers generated by moderator if player wins before.
					while (!link.successFlag[0] && !link.successFlag[1] && !link.successFlag[2] &&  z<10 ) {
						
						link.chanceFlag[0] = false;
						link.chanceFlag[1] = false;
						link.chanceFlag[2] = false;
						
						numberAnnounced = numbr.get(z++);
						
					System.out.println("Moderator Generated: "+ numberAnnounced);
					try {
							//display other no. by 1200 milli-seconds delay
							Thread.sleep(1200);
						}
					catch(Exception e) {}
						
					link.announcedNumber = numberAnnounced;
					numberAnnounced = 0;  	

					link.obj.notifyAll();
					
					// Makes other 2 players wait while one is executing.
					while(!link.chanceFlag[0] || !link.chanceFlag[1] || !link.chanceFlag[2]) {
							try {
								
								link.obj.wait(); 
							} 
							catch (Exception e) {}
						}				
					}
					
					
					link.gameCompletionFlag = true; // DEnotes that 1 player has won the game.
					
					link.obj.notifyAll(); 			
				}		
		
	}

}
